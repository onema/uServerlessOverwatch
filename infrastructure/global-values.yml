# =======================================================================
# Permissions
# =======================================================================
iamRoleStatements:
  - Effect: Allow
    Action:
      - sqs:SendMessageBatch
      - sqs:SendMessage
    Resource:
      - Fn::GetAtt: [DeadLetterQueue, Arn]
  - Effect: Allow
    Action:
      - logs:PutRetentionPolicy
      - logs:PutSubscriptionFilter
    Resource: "*"
  - Effect: Allow
    Action:
      - sns:Publish
    Resource:
       - Ref: SNSErrorTopic
       - Ref: SNSLogTopic
       - Ref: SNSNotificationTopic
       - Ref: SNSMetricTopic
  - Effect: Allow
    Action:
      - sqs:SendMessage
    Resource:
      Fn::GetAtt: [DeadLetterQueue, Arn]
  - Effect: Allow
    Action:
      - lambda:UpdateFunctionConfiguration
    Resource: "*"

# =======================================================================
# Environment Variables
# =======================================================================
environment:
  REPORT_EXCEPTION: false
  LOG_LEVEL: DEBUG
  STAGE_NAME: ${self:custom.stageName}
  SNS_ERROR_TOPIC:
    Ref: SNSErrorTopic
  SNS_NOTIFICATION_TOPIC:
    Ref: SNSNotificationTopic
  SNS_LOG_TOPIC:
    Ref: SNSLogTopic
  SNS_METRIC_TOPIC:
    Ref: SNSMetricTopic
  APP_NAME: ${self:service}

loggroupEvents:
  - cloudwatchEvent:
      event:
        source:
          - aws.logs
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - logs.amazonaws.com
          eventName:
            - CreateLogGroup

lambdaCreatedEvents:
  - cloudwatchEvent:
      event:
        source:
          - aws.lambda
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - lambda.amazonaws.com
          eventName:
            - CreateFunction20150331

custom:
  stageName: ${opt:stage, self:provider.stage}
